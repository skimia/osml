/// <reference path="lib/jquery.d.ts"/>
/// <reference path="lib/angular.d.ts"/>
var app;
(function (_app) {
    'use strict';
    var app = angular.module('app', ['osml']);
})(app || (app = {}));

var OSML;
(function (OSML) {
    var Services;
    (function (Services) {
        var DataSources = (function () {
            function DataSources() {
                this.datasources = {};
            }
            DataSources.prototype.add = function (name, datasource) {
            };
            DataSources.prototype.delete = function (name) {
            };
            DataSources.prototype.get = function (name) {
            };
            return DataSources;
        })();
        Services.DataSources = DataSources;
    })(Services = OSML.Services || (OSML.Services = {}));
})(OSML || (OSML = {}));

var OSML;
(function (OSML) {
    var Directives;
    (function (Directives) {
        var osInput = (function () {
            function osInput() {
            }
            osInput.prototype.link = function (scope, element, attrs) {
                console.log('test');
                $(element).html('Test');
            };
            osInput.factory = function () {
                return function () {
                    return new osInput();
                };
            };
            return osInput;
        })();
        Directives.osInput = osInput;
    })(Directives = OSML.Directives || (OSML.Directives = {}));
})(OSML || (OSML = {}));

/// <reference path="services/DataSources.ts"/>
/// <reference path="directives/osInput.ts"/>
var OSML;
(function (OSML) {
    'use strict';
    var osml = angular.module('OSML', []).service('DataSourceService', OSML.Services.DataSources).directive('osInput', OSML.Directives.osInput.factory());
})(OSML || (OSML = {}));

/// <reference path="../lib/jquery.d.ts"/>
/// <reference path="../lib/angular.d.ts"/>
var OSML;
(function (OSML) {
    var Directives;
    (function (Directives) {
        var Directive = (function () {
            function Directive() {
            }
            Directive.prototype.factory = function () {
                return function () {
                    return new Directive();
                };
            };
            return Directive;
        })();
        Directives.Directive = Directive;
    })(Directives = OSML.Directives || (OSML.Directives = {}));
})(OSML || (OSML = {}));
